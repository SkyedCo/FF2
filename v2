
local uis = game:GetService("UserInputService")

uis.InputBegan:Connect(function(key, gp)
    if gp then return end; -- prevents it from opening/closing when inside of a text box

    if key.KeyCode == Enum.KeyCode.CTRL then
        script.Parent.Visible = not script.Parent.Visible
    end
end)








 lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/SkyedCo/FF2/main/ui%20libary%20test"))();
local tab1 = lib:NewTab("FF2", "")
tab1:NewSlider("Speed [Q]",1,2,1,function(value)
   
 
    
local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';
UIS.InputBegan:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Q then
            _G.Running = true
                while wait(0.1) and _G.Running == true do

game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * (value)
end
        end
end)
UIS.InputEnded:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Q then
                _G.Running = false
        end
        end)
end)






















local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';
 
_G.JumpHeight = 50;
 
function Action(Object, Function) if Object ~= nil then Function(Object); end end
 
UIS.InputBegan:connect(function(UserInput)
    if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
        Action(Player.Character.Humanoid, function(self)
            if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                Action(self.Parent.HumanoidRootPart, function(self)
                    self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
                end)
            end
        end)
    end
end)

 
